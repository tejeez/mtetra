// Automatically generated by cbindgen

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

struct L1;

// Number of a timeslot
struct SlotNumber {
  // Timeslot number (TN) (1-4)
  uint8_t timeslot;
  // TDMA Frame number (FN) (1-18)
  uint8_t frame;
  // TDMA Multiframe Number (MN) (1-60)
  uint8_t multiframe;
};

struct RxBurstInfo {
  int64_t timestamp;
  // Received signal strength (unit TBD)
  float rssi;
  // Esimated carrier frequency offset in Hz
  float cfo;
};

struct RxDlBurst {
  struct RxBurstInfo info;
  uint8_t bits[510];
};

struct RxUlNormalBurst {
  struct RxBurstInfo info;
  uint8_t bits[462];
};

struct RxUlControlBurst {
  struct RxBurstInfo info;
  uint8_t bits[206];
};

enum RxSubslotBurst_Tag {
  // No burst detected in subslot.
  RX_SUBSLOT_BURST_NONE,
  // Control up-link burst in subslot.
  RX_SUBSLOT_BURST_UL_CONTROL,
};

struct RxSubslotBurst {
  enum RxSubslotBurst_Tag tag;
  union {
    struct {
      struct RxUlControlBurst ul_control;
    };
  };
};

struct RxDmoBurst {
  struct RxBurstInfo info;
  uint8_t bits[470];
};

enum RxBurst_Tag {
  // No burst detected in slot.
  RX_BURST_NONE,
  // Normal continuous down-link burst
  // with normal training sequence 1.
  RX_BURST_DL_NORMAL1,
  // Normal continuous down-link burst
  // with normal training sequence 2.
  RX_BURST_DL_NORMAL2,
  // Synchronization continuous donk-link burst.
  RX_BURST_DL_SYNC,
  // Normal up-link burst.
  RX_BURST_UL_NORMAL,
  // Up-link burst(s) in subslots.
  // Each subslot may contain a control up-link burst
  // or no burst.
  RX_BURST_SUBSLOTS,
  // Direct mode normal burst
  // with normal training sequence 1.
  RX_BURST_DMO_NORMAL1,
  // Direct mode normal burst
  // with normal training sequence 2.
  RX_BURST_DMO_NORMAL2,
  // Direct mode synchronization burst.
  RX_BURST_DMO_SYNC,
};

struct RxBurst {
  enum RxBurst_Tag tag;
  union {
    struct {
      struct RxDlBurst dl_normal1;
    };
    struct {
      struct RxDlBurst dl_normal2;
    };
    struct {
      struct RxDlBurst dl_sync;
    };
    struct {
      struct RxUlNormalBurst ul_normal;
    };
    struct {
      struct RxSubslotBurst subslots[2];
    };
    struct {
      struct RxDmoBurst dmo_normal1;
    };
    struct {
      struct RxDmoBurst dmo_normal2;
    };
    struct {
      struct RxDmoBurst dmo_sync;
    };
  };
};

enum TxBurst_Tag {
  // No burst to transmit.
  TX_BURST_NONE,
  // Continuous down-link burst.
  // Modulator does not care whether it is a normal or synchronization
  // burst (since they have the same number of symbols),
  // so both use the same value.
  TX_BURST_DL,
  // Direct mode burst.
  // Modulator does not care whether it is a normal or synchronization
  // burst (since they have the same number of symbols),
  // so both use the same value.
  TX_BURST_DMO,
};

struct TxBurst {
  enum TxBurst_Tag tag;
  union {
    struct {
      uint8_t dl[510];
    };
    struct {
      uint8_t dmo[470];
    };
  };
};

struct L1Callbacks {
  // C function to process received burst(s).
  // Called once per slot.
  void (*rx_cb)(void *arg, struct SlotNumber slot, const struct RxBurst *burst);
  // Argument passed to rx_cb.
  void *rx_cb_arg;
  // C function to produce a transmit burst.
  // Called once per slot.
  void (*tx_cb)(void *arg, struct SlotNumber slot, struct TxBurst *burst);
  // Argument passed to tx_cb.
  void *tx_cb_arg;
};

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

struct L1 *l1_init(void);

// C wrapper for L1::process.
// Returns 0 on success, negative number on failure.
int l1_process(struct L1 *l1, struct L1Callbacks callbacks);

// Convert slot number to an integer representing
// the number of slots from beginning of a hyperframe.
int32_t slot_to_int(struct SlotNumber slot);

// Convert an integer representing the number of slots
// from beginning of a hyperframe to a slot number.
struct SlotNumber slot_from_int(int32_t i);

struct SlotNumber slot_plus(struct SlotNumber slot, int32_t slots);

struct SlotNumber slot_minus(struct SlotNumber slot, int32_t slots);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
